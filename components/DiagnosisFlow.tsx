import React, { useState, useEffect } from 'react';
import { measureTransition, PERF_TARGETS } from './PerformanceMonitor';

// Ë¶Å‰ª∂ÂÆöÁæ©Êõ∏Ê∫ñÊã†„ÅÆË®∫Êñ≠Ë≥™Âïè„Éá„Éº„Çø
const diagnosisQuestions = [
  {
    id: 1,
    questionId: 'age',
    title: '1Ô∏è‚É£ „ÅÇ„Å™„Åü„ÅÆÂπ¥‰ª£„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ',
    type: 'radio',
    options: [
      { value: '20s', label: '20‰ª£Ôºà„Ç≠„É£„É™„Ç¢ÂΩ¢ÊàêÊúüÔºâ' },
      { value: '30s', label: '30‰ª£ÔºàË≥áÁî£ÂΩ¢ÊàêÊúüÔºâ' },
      { value: '40s', label: '40‰ª£ÔºàË≥áÁî£ÂÖÖÂÆüÊúüÔºâ' },
      { value: '50s', label: '50‰ª£ÔºàË≥áÁî£‰øùÂÖ®ÊúüÔºâ' },
      { value: '60s_plus', label: '60‰ª£‰ª•‰∏äÔºàÈÅãÁî®ÊúüÔºâ' }
    ]
  },
  {
    id: 2,
    questionId: 'experience',
    title: '2Ô∏è‚É£ ÊäïË≥áÁµåÈ®ì„ÅØ„Å©„ÅÆÁ®ãÂ∫¶„Åß„Åô„ÅãÔºü',
    type: 'radio',
    options: [
      { value: 'beginner', label: 'üå± ÂàùÂøÉËÄÖÔºàÊäïË≥áÊú™ÁµåÈ®ìÔºâ' },
      { value: 'basic', label: 'üìö Âü∫Á§éÁü•Ë≠ò„ÅÇ„ÇäÔºàÂãâÂº∑‰∏≠Ôºâ' },
      { value: 'experienced', label: 'üìä ÁµåÈ®ìËÄÖÔºàÈÅãÁî®ÂÆüÁ∏æ„ÅÇ„ÇäÔºâ' }
    ]
  },
  {
    id: 3,
    questionId: 'purpose',
    title: '3Ô∏è‚É£ ÊäïË≥á„ÅÆ‰∏ª„Å™ÁõÆÁöÑ„ÅØÔºü',
    type: 'radio',
    options: [
      { value: 'education', label: 'üéì ÊïôËÇ≤Ë≥áÈáë„ÅÆÊ∫ñÂÇô' },
      { value: 'housing', label: 'üè† ‰ΩèÂÆÖË≥ºÂÖ•Ë≥áÈáë' },
      { value: 'retirement', label: 'üèñÔ∏è ËÄÅÂæåË≥áÈáë„ÅÆÁ¢∫‰øù' },
      { value: 'wealth', label: 'üìà Ë≥áÁî£Êã°Â§ß„ÉªË≤°Áî£ÂΩ¢Êàê' }
    ]
  },
  {
    id: 4,
    questionId: 'amount',
    title: '4Ô∏è‚É£ Êúà„ÅÆÊäïË≥á‰∫àÁÆó„ÅØ„ÅÑ„Åè„Çâ„Åß„Åô„ÅãÔºü',
    type: 'radio',
    options: [
      { value: 'under_10k', label: '1‰∏áÂÜÜÊú™Ê∫Ä' },
      { value: '10k_30k', label: '1‰∏áÂÜÜ„Äú3‰∏áÂÜÜ' },
      { value: '30k_50k', label: '3‰∏áÂÜÜ„Äú5‰∏áÂÜÜ' },
      { value: '50k_100k', label: '5‰∏áÂÜÜ„Äú10‰∏áÂÜÜ' },
      { value: 'over_100k', label: '10‰∏áÂÜÜ‰ª•‰∏ä' }
    ]
  },
  {
    id: 5,
    questionId: 'timing',
    title: '5Ô∏è‚É£ „ÅÑ„Å§„Åã„ÇâÈÅãÁî®„ÇíÂßã„ÇÅ„Åü„ÅÑ„Åß„Åô„ÅãÔºü',
    type: 'radio',
    options: [
      { value: 'now', label: 'üöÄ „Åô„Åê„Å´Âßã„ÇÅ„Åü„ÅÑ' },
      { value: 'within_month', label: 'üìÖ 1„É∂Êúà‰ª•ÂÜÖ' },
      { value: 'carefully', label: '‚è≥ „Åò„Å£„Åè„ÇäÊ§úË®é„Åó„Å¶„Åã„Çâ' }
    ]
  }
];

// 6ÂïèÁõÆ: ÈõªË©±Áï™Âè∑ÂÖ•Âäõ
const PHONE_QUESTION = {
  id: 6,
  questionId: 'phone',
  title: '6Ô∏è‚É£ „ÅîÈÄ£Áµ°ÂèØËÉΩ„Å™Êê∫Â∏ØÈõªË©±Áï™Âè∑„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  type: 'phone',
  options: [],
};

export interface DiagnosisAnswers {
  age?: string;
  experience?: string;
  purpose?: string;
  amount?: string;
  timing?: string;
  phone?: string;
}

interface DiagnosisFlowProps {
  onComplete: (answers: DiagnosisAnswers) => void;
  onCancel: () => void;
}

const CARD_STYLE: React.CSSProperties = {
  maxWidth: 400,
  margin: '40px auto',
  padding: '32px 24px',
  borderRadius: 24,
  boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
  background: 'linear-gradient(135deg, #fff 60%, #ffe0e9 100%)',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  minHeight: 340,
};
const PROGRESS_STYLE: React.CSSProperties = {
  width: '100%',
  height: 8,
  borderRadius: 4,
  background: 'linear-gradient(90deg, #ffb6b9, #fae3d9)',
  marginBottom: 24,
};
const QUESTION_STYLE: React.CSSProperties = {
  fontSize: 20,
  fontWeight: 600,
  marginBottom: 24,
  textAlign: 'center',
};
const CHOICES_STYLE: React.CSSProperties = {
  width: '100%',
  display: 'flex',
  flexDirection: 'column',
  gap: 16,
  marginBottom: 32,
};
const CHOICE_BTN: React.CSSProperties = {
  fontSize: 18,
  padding: '18px 0',
  borderRadius: 16,
  border: 'none',
  background: 'linear-gradient(90deg, #fcb69f 0%, #ffdde1 100%)',
  color: '#333',
  fontWeight: 500,
  boxShadow: '0 2px 8px rgba(0,0,0,0.06)',
  cursor: 'pointer',
  transition: 'all 0.2s',
};
const CHOICE_BTN_SELECTED: React.CSSProperties = {
  ...CHOICE_BTN,
  background: 'linear-gradient(90deg, #a1c4fd 0%, #c2e9fb 100%)',
  color: '#222',
  fontWeight: 700,
  boxShadow: '0 4px 16px rgba(33,150,243,0.10)',
};
const ACTIONS_STYLE: React.CSSProperties = {
  width: '100%',
  display: 'flex',
  justifyContent: 'space-between',
  gap: 16,
};
const ACTION_BTN: React.CSSProperties = {
  flex: 1,
  fontSize: 16,
  padding: '14px 0',
  borderRadius: 12,
  border: 'none',
  background: 'linear-gradient(90deg, #fcb69f 0%, #ffdde1 100%)',
  color: '#333',
  fontWeight: 600,
  cursor: 'pointer',
  marginTop: 8,
  transition: 'all 0.2s',
};
const NEXT_BTN: React.CSSProperties = {
  ...ACTION_BTN,
  background: 'linear-gradient(90deg, #a1c4fd 0%, #c2e9fb 100%)',
  color: '#222',
};

const DiagnosisFlow: React.FC<DiagnosisFlowProps> = ({ onComplete, onCancel }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [answers, setAnswers] = useState<DiagnosisAnswers>({});
  const [selectedAnswer, setSelectedAnswer] = useState<string>('');
  const [phoneInput, setPhoneInput] = useState('');
  const [phoneError, setPhoneError] = useState('');

  const totalSteps = diagnosisQuestions.length + 1; // 6ÂïèÁõÆ„Åæ„Åß
  const isPhoneStep = currentStep === 6;
  const currentQuestion = isPhoneStep ? PHONE_QUESTION : diagnosisQuestions.find(q => q.id === currentStep);

  const handleAnswerSelect = (value: string) => {
    setSelectedAnswer(value);
  };

  const handleNext = () => {
    if (isPhoneStep) {
      // ÈõªË©±Áï™Âè∑„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
      const sanitized = phoneInput.replace(/\D/g, '');
      if (!/^0\d{9,10}$/.test(sanitized)) {
        setPhoneError('Ê≠£„Åó„ÅÑÊê∫Â∏ØÈõªË©±Áï™Âè∑„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æã: 09012345678Ôºâ');
        return;
      }
      setPhoneError('');
      const newAnswers = { ...answers, phone: sanitized };
      setAnswers(newAnswers);
      onComplete(newAnswers);
      return;
    }
    if (!selectedAnswer) {
      alert('ÈÅ∏ÊäûËÇ¢„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }
    // ÁèæÂú®„ÅÆË≥™Âïè„ÅÆÁ≠î„Åà„Çí‰øùÂ≠ò
    const newAnswers = { 
      ...answers, 
      [currentQuestion!.questionId]: selectedAnswer 
    };
    setAnswers(newAnswers);
    setSelectedAnswer('');
    setCurrentStep(currentStep + 1);
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      if (currentStep - 1 === 6) {
        setPhoneInput(answers.phone || '');
      } else {
        const prevQuestion = diagnosisQuestions.find(q => q.id === currentStep - 1);
        if (prevQuestion) {
          setSelectedAnswer(answers[prevQuestion.questionId as keyof DiagnosisAnswers] || '');
        }
      }
    }
  };

  useEffect(() => {
    if (process.env.NODE_ENV !== 'production') {
      const end = measureTransition('Ë®∫Êñ≠ÁîªÈù¢ÈÅ∑Áßª', PERF_TARGETS.diagnosis);
      return end;
    }
  }, []);

  if (!currentQuestion) return null;

  return (
    <div style={CARD_STYLE}>
      <div style={PROGRESS_STYLE}>
        <div style={{
          width: `${((currentStep) / totalSteps) * 100}%`,
          height: '100%',
          borderRadius: 4,
          background: 'linear-gradient(90deg, #ffb6b9, #fae3d9)',
        }} />
      </div>
      <div style={QUESTION_STYLE}>{currentQuestion.title}</div>
      <div style={CHOICES_STYLE}>
        {isPhoneStep ? (
          <>
            <input
              type="tel"
              value={phoneInput}
              onChange={e => setPhoneInput(e.target.value.replace(/[^0-9]/g, ''))}
              placeholder="09012345678"
              style={{
                width: '100%',
                fontSize: 18,
                padding: '14px',
                borderRadius: 12,
                border: '1px solid #ccc',
                marginBottom: 8,
                textAlign: 'center',
              }}
              maxLength={11}
            />
            {phoneError && <div style={{ color: 'red', fontSize: 14 }}>{phoneError}</div>}
            <div style={{ 
              color: '#2563eb', 
              fontSize: 14, 
              marginTop: 10,
              fontWeight: 500,
              backgroundColor: '#eff6ff',
              padding: '8px 12px',
              borderRadius: '6px',
              border: '1px solid #bfdbfe'
            }}>
              üí¨ Ë®∫Êñ≠ÁµêÊûú„ÇíÈÄÅ‰ø°„Åô„ÇãÈõªË©±Áï™Âè∑„ÇíË™çË®º„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç≥„Éº„Éâ„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô
            </div>
          </>
        ) : (
          currentQuestion.options.map((option) => (
            <button
              key={option.value}
              style={selectedAnswer === option.value ? CHOICE_BTN_SELECTED : CHOICE_BTN}
              onClick={() => handleAnswerSelect(option.value)}
            >
              {option.label}
            </button>
          ))
        )}
      </div>
      <div style={ACTIONS_STYLE}>
        <button style={ACTION_BTN} onClick={handlePrevious}>‚Üê Êàª„Çã</button>
        <button style={NEXT_BTN} onClick={handleNext} disabled={isPhoneStep ? phoneInput.length < 10 : !selectedAnswer}>Ê¨°„Å∏ ‚Üí</button>
      </div>
    </div>
  );
};

export default DiagnosisFlow; 