# Zero神 Nginx Configuration
# セキュリティとパフォーマンスを重視した設定

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ログ形式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # パフォーマンス設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.line.me https://*.supabase.co wss://*.supabase.co; frame-ancestors 'none';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

    server {
        listen 80;
        server_name _;
        
        # セキュリティ設定
        client_max_body_size 10M;
        client_body_timeout 30s;
        client_header_timeout 30s;
        
        # Rate limiting適用
        limit_req zone=general burst=20 nodelay;

        # ドキュメントルート
        root /usr/share/nginx/html;
        index index.html;

        # API プロキシ（開発環境用）
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            # CORSヘッダー
            add_header Access-Control-Allow-Origin "http://localhost:5173" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials true always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass http://zeroshin-api:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # 静的ファイル配信
        location / {
            try_files $uri $uri/ @fallback;
            
            # キャッシュ設定
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
            }
        }

        # SPAフォールバック
        location @fallback {
            rewrite ^.*$ /index.html last;
        }

        # ヘルスチェック
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # robots.txt
        location = /robots.txt {
            access_log off;
            log_not_found off;
        }

        # favicon.ico
        location = /favicon.ico {
            access_log off;
            log_not_found off;
        }

        # セキュリティ：隠しファイルへのアクセス拒否
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # セキュリティ：機密ファイルへのアクセス拒否
        location ~* \.(env|log|ini|conf|bak|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # HTTPSリダイレクト用サーバー（本番環境用）
    # server {
    #     listen 80;
    #     server_name yourdomain.com www.yourdomain.com;
    #     return 301 https://$server_name$request_uri;
    # }

    # HTTPS設定（本番環境用）
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com www.yourdomain.com;
    #     
    #     # SSL証明書
    #     ssl_certificate /etc/ssl/certs/yourdomain.crt;
    #     ssl_certificate_key /etc/ssl/private/yourdomain.key;
    #     
    #     # SSL設定
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # 残りの設定は上記と同じ
    # }
}